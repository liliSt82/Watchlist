@using Microsoft.AspNetCore.Identity;
@using Watchlist.Data.Models;
@inject SignInManager<User> SignInManager;
@inject UserManager<User> UserManager;

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <form class="form-inline" asp-controller="User" asp-action="Logout" asp-route-id="@UserManager.GetUserId(User)">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="User" asp-action="Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="User" asp-action="Login">Login</a>
        </li>
    }
</ul>



  @*  use this code if you are scaffolding identity
    <ul class="navbar-nav">
    @if (signinmanager.issignedin(user))
    {
        <li class="nav-item">
            <form class="form-inline" asp-area="identity" asp-page="/account/logout" asp-route-returnurl="@url.action("index", "home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="identity" asp-page="/account/register">register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="identity" asp-page="/account/login">login</a>
        </li>
    }
</ul>*@
